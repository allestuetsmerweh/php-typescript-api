import js from '@eslint/js';
import ts from 'typescript-eslint';
import stylistic from '@stylistic/eslint-plugin';

const ignores = [
    'client/lib/',
    'example/web/dist/',
    'example/webpack.config.js',
    'node_modules/',
    'php-coverage/',
    'vendor/',
];

const javaScriptRules = {
    '@stylistic/indent': ['warn', 4, { 'SwitchCase': 1 }],
    '@stylistic/semi': ['error', 'always'],
    '@stylistic/no-console': [0],
    '@stylistic/array-bracket-spacing': ['error', 'never'],
    '@stylistic/array-bracket-newline': ['error', 'consistent'],
    'arrow-body-style': ['error', 'as-needed'],
    '@stylistic/arrow-parens': ['error', 'always'],
    '@stylistic/arrow-spacing': 'error',
    'block-scoped-var': 'error',
    '@stylistic/block-spacing': 'error',
    '@stylistic/brace-style': ['error', '1tbs', { 'allowSingleLine': true }],
    '@stylistic/comma-dangle': ['error', {
        'arrays': 'always-multiline',
        'objects': 'always-multiline',
        'imports': 'always-multiline',
        'exports': 'always-multiline',
        'functions': 'always-multiline',
        'importAttributes': 'always-multiline',
        'dynamicImports': 'always-multiline',
        'enums': 'always-multiline',
        'generics': 'always-multiline',
        'tuples': 'always-multiline',
    }],
    '@stylistic/comma-spacing': ['error', { 'before': false, 'after': true }],
    '@stylistic/comma-style': ['error', 'last'],
    '@stylistic/computed-property-spacing': ['error', 'never'],
    'consistent-return': 'error',
    'curly': ['error', 'all'],
    'default-case': 'error',
    '@stylistic/dot-location': ['error', 'property'],
    'dot-notation': 'error',
    '@stylistic/eol-last': ['error', 'always'],
    'eqeqeq': ['error', 'always'],
    'for-direction': 'warn',
    'func-call-spacing': ['error', 'never'],
    'func-name-matching': 'warn',
    'func-names': ['error', 'always'],
    'func-style': ['error', 'declaration', { 'allowArrowFunctions': true }],
    '@stylistic/function-paren-newline': ['error', 'consistent'],
    '@stylistic/generator-star-spacing': ['error', { 'before': false, 'after': true }],
    'getter-return': 'error',
    'guard-for-in': 'warn',
    '@stylistic/key-spacing': ['error', { 'beforeColon': false, 'afterColon': true }],
    '@stylistic/keyword-spacing': 'error',
    '@stylistic/linebreak-style': ['error', 'unix'],
    'lines-around-directive': 'error',
    '@stylistic/lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],
    'no-alert': 'error',
    'no-array-constructor': 'error',
    'no-await-in-loop': 'error',
    'no-buffer-constructor': 'error',
    'no-caller': 'error',
    '@stylistic/no-confusing-arrow': ['error', { 'allowParens': true }],
    'no-continue': 'error',
    'no-duplicate-imports': 'error',
    'no-else-return': 'error',
    'no-empty-function': 'off',
    'no-eval': 'error',
    'no-extend-native': 'error',
    '@stylistic/no-floating-decimal': 'error',
    'no-implied-eval': 'error',
    'no-invalid-this': 'error',
    'no-labels': 'error',
    'no-lone-blocks': 'error',
    'no-lonely-if': 'error',
    'no-multi-assign': 'error',
    '@stylistic/no-multi-spaces': 'error',
    '@stylistic/no-multiple-empty-lines': 'error',
    'no-native-reassign': 'error',
    'no-negated-in-lhs': 'error',
    'no-new-func': 'error',
    'no-new-require': 'error',
    'no-octal-escape': 'error',
    'no-param-reassign': 'error',
    'no-proto': 'error',
    'no-return-assign': 'error',
    'no-return-await': 'error',
    'no-script-url': 'error',
    'no-self-compare': 'error',
    'no-sequences': 'error',
    'no-shadow-restricted-names': 'error',
    'no-spaced-func': 'error',
    '@stylistic/no-tabs': 'error',
    'no-template-curly-in-string': 'error',
    'no-throw-literal': 'error',
    '@stylistic/no-trailing-spaces': 'error',
    'no-unneeded-ternary': 'error',
    'no-unused-expressions': 'error',
    'no-unused-vars': ['error', {'args': 'none'}],
    'no-use-before-define': 'off',
    'no-useless-concat': 'error',
    'no-useless-constructor': 'error',
    'no-useless-rename': 'error',
    'no-useless-return': 'error',
    'no-var': 'error',
    'no-warning-comments': 'warn',
    '@stylistic/no-whitespace-before-property': 'error',
    'no-with': 'error',
    '@stylistic/object-curly-newline': ['error', { 'consistent': true }],
    'prefer-const': 'error',
    'prefer-numeric-literals': 'error',
    'prefer-promise-reject-errors': 'error',
    'prefer-rest-params': 'error',
    'prefer-template': 'error',
    '@stylistic/quotes': ['error', 'single'],
    'radix': 'error',
    '@stylistic/rest-spread-spacing': 'error',
    '@stylistic/semi-spacing': 'error',
    '@stylistic/space-before-blocks': 'error',
    '@stylistic/space-infix-ops': 'error',
    '@stylistic/space-unary-ops': ['error', { 'words': true, 'nonwords': false }],
    '@stylistic/spaced-comment': ['error', 'always', { 'block': { 'balanced': true } }],
    'symbol-description': 'error',
    '@stylistic/template-curly-spacing': 'error',
    '@stylistic/wrap-iife': 'error',
};

const typeScriptRules = {
    ...javaScriptRules,
    '@typescript-eslint/ban-ts-comment': 'off',
    '@typescript-eslint/ban-ts-ignore': 'off',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'error',
    '@typescript-eslint/interface-name-prefix': 'off',
    '@typescript-eslint/member-delimiter-style': 'off',
    '@typescript-eslint/no-empty-function': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/no-non-null-assertion': 'off',
    '@typescript-eslint/no-unused-vars': ['error', {
        'vars': 'all',
        'args': 'all',
        'ignoreRestSiblings': true,
        'argsIgnorePattern': '^_',
        'varsIgnorePattern': '^_',
        'caughtErrorsIgnorePattern': '^_',
        'destructuredArrayIgnorePattern': '^_',
    }],
    '@typescript-eslint/no-shadow': ['error'],
    '@typescript-eslint/no-use-before-define': ['error', {'classes': false, 'functions': false}],
    '@typescript-eslint/no-useless-constructor': ['error'],
    'no-shadow': 'off',
    'no-unused-vars': 'off',
    'no-useless-constructor': 'off',
};


export default [
    {ignores},
    js.configs.recommended,
    ...ts.configs.recommended,
    ts.configs.eslintRecommended,
    {
        languageOptions: {
            parserOptions: {
                ecmaVersion: 2018,
                sourceType: 'module',
            },
        },
        plugins: {'@stylistic': stylistic},
        rules: javaScriptRules,
    },
    {
        files: ['client/src/**/*.ts'],
        languageOptions: {
            globals: { 'Atomics': 'readonly', 'SharedArrayBuffer': 'readonly' },
            parser: ts.parser,
            parserOptions: {
                'ecmaVersion': 2018,
                'sourceType': 'module',
                'project': './tsconfig.json',
            },
        },
        plugins: {'@typescript-eslint': ts.plugin},
        rules: typeScriptRules,
    },
    {
        files: ['client/tests/**/*.ts'],
        languageOptions: {
            globals: { 'Atomics': 'readonly', 'SharedArrayBuffer': 'readonly' },
            parser: ts.parser,
            parserOptions: {
                'ecmaVersion': 2018,
                'sourceType': 'module',
                'project': './client/tests/tsconfig.json',
            },
        },
        plugins: {'@typescript-eslint': ts.plugin},
        rules: typeScriptRules,
    },
    {
        files: ['example/**/*.ts'],
        languageOptions: {
            globals: { 'Atomics': 'readonly', 'SharedArrayBuffer': 'readonly' },
            parser: ts.parser,
            parserOptions: {
                'ecmaVersion': 2018,
                'sourceType': 'module',
                'project': './example/tsconfig.json',
            },
        },
        plugins: {'@typescript-eslint': ts.plugin},
        rules: typeScriptRules,
    },
];
